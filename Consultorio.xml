<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Consultorio</name>
    </assembly>
    <members>
        <member name="T:AgendaDAO">
            <summary>
            Classe que é responsável pela persistência dos agendamentos.
            </summary>
        </member>
        <member name="T:ErroDAO">
            <summary>
            Classe responsável pela persistência dos erros gerados ao decorrer da execução.
            </summary>
        </member>
        <member name="T:PacienteDAO">
            <summary>
            Classe responsável pela persistência dos dados do cadastro dos pacientes.
            </summary>
        </member>
        <member name="T:Agendamentos">
            <summary>
            Classe que possui 4 variáveis(Cpf, DataConsulta, HoraInicial, HoraFinal) para a realização de um agendamento.
            </summary>
        </member>
        <member name="T:Erros">
            <summary>
            Classe que possui 2 variáveis(campo, valorDigitado) para descrever o tipo do erro e o valor que foi digitado errado.
            </summary>
        </member>
        <member name="T:Paciente">
            <summary>
            Classe que herda a classe Pessoa e que possui uma variável do tipo "Agendamentos" que irá armazenar a última consulta do paciente.Possui um construtor sem parâmetros
            e um com a inicialização das variáveis.
            </summary>
        </member>
        <member name="T:Pessoa">
            <summary>
            Classe abstrata que possui 3 variáveis(Cpf, Nome, DataNascimento).Possui um construtor sem parâmetros e um com a inicialização das variáveis.
            </summary>
        </member>
        <member name="T:Controlador">
            <summary>
            Classe responsável pela administração das classes. Responsável por comunicar a view com as demais classes.
            </summary>
        </member>
        <member name="T:AgendamentoForm">
            <summary>
            Classe intermediária entre a classe "Agendamentos" e o input do usuário.Possui as mesmas variáveis de "Agendamento" porém em formato string, para realizar a validação.
            </summary>
        </member>
        <member name="T:PacienteForm">
            <summary>
            Classe intermediária entre a classe "Paciente" e o input do usuário.Possui as mesmas variáveis de "Paciente" porém em formato string, para realizar a validação.
            </summary>
        </member>
        <member name="T:ValidaAgendamento">
            <summary>
            Classe responsável pelos métodos de validação de um agendamento.
            </summary>
        </member>
        <member name="M:ValidaAgendamento.VerificaAgendamentoCliente(Paciente,System.Collections.Generic.List{Agendamentos},ValidaData)">
            <summary>
            Método que verifica se o paciente possui uma consulta futura.
            </summary>
            <param name="pct"></param>
            <param name="agds"></param>
            <param name="validData"></param>
            <returns>True se possui. False se não.</returns>
        </member>
        <member name="M:ValidaAgendamento.VerificaDataAgendamento(System.String,System.String,System.Collections.Generic.List{Agendamentos})">
            <summary>
            Verifica se o cpf e a data passada estão na lista de agendamentos.
            </summary>
            <param name="cpf"></param>
            <param name="data"></param>
            <param name="agds"></param>
            <returns>True caso sim. False caso não.</returns>
        </member>
        <member name="T:ValidaCpf">
            <summary>
            Classe responsável pelos métodos de validação de um cpf. 
            </summary>
        </member>
        <member name="M:ValidaCpf.VerificaCpf(System.String)">
            <summary>
            Verifica se o cpf passado é um cpf válido.
            </summary>
            <param name="cpf"></param>
            <returns>True se sim. False se não.</returns>
        </member>
        <member name="M:ValidaCpf.VerificaCpfExiste(System.String,System.Collections.Generic.List{Paciente})">
            <summary>
            Verifica se o cpf passado como argumento consta na lista de pacientes cadastrados.
            </summary>
            <param name="cpf"></param>
            <param name="pcts"></param>
            <returns>True se sim. False se não.</returns>
        </member>
        <member name="T:ValidaData">
            <summary>
            Classe responsável pelos métodos de validação de uma data.
            </summary>
        </member>
        <member name="M:ValidaData.VerificaData(System.DateTime)">
            <summary>
            Verifica se a data é maior ou igual a data atual.
            </summary>
            <param name="data"></param>
            <returns>true se sim e false se não.</returns>
        </member>
        <member name="M:ValidaData.VerificaFormatoData(System.String)">
            <summary>
            Verifica se a string recebida como parâmetro consegue ser transformada no formato "dd/MM/yyyy" de data.
            </summary>
            <param name="data"></param>
            <returns>True caso sim.False caso não.</returns>
        </member>
        <member name="M:ValidaData.VerificaIdade(System.DateTime)">
            <summary>
            Verifica se idade é menor que 13 anos.
            </summary>
            <param name="data">Data a ser feito o cálculo da idade</param>
            <returns>True se sim. False se não.</returns>
        </member>
        <member name="T:ValidaHora">
            <summary>
            Classe responsável pelos métodos de validação de uma hora.
            </summary>
        </member>
        <member name="M:ValidaHora.VerificaFormatoHora(System.String)">
            <summary>
            Verifica se a hora passada como argumento está no formato DDDD(Numeral).
            </summary>
            <param name="hora"></param>
            <returns>True se sim.False se não.</returns>
        </member>
        <member name="M:ValidaHora.ValidaHoraIni(System.String)">
            <summary>
            Verifica se a hora inicial é uma hora válida.
            </summary>
            <param name="hora"></param>
            <returns>True se sim.False se não.</returns>
        </member>
        <member name="M:ValidaHora.ValidaHoraFim(System.String,System.String)">
            <summary>
            Verifica se a hora final é uma hora válida.
            </summary>
            <param name="horaIni"></param>
            <param name="horaFim"></param>
            <returns>True se sim.False se não.</returns>
        </member>
        <member name="M:ValidaHora.VerificaHoraAgendamento(System.String,System.String,System.String,System.Collections.Generic.List{Agendamentos})">
            <summary>
            Verifica se a hora passada como parâmetro existe na lista de agendamentos.
            </summary>
            <param name="cpf"></param>
            <param name="data"></param>
            <param name="hora"></param>
            <param name="agds"></param>
            <returns>true se sim.False se não.</returns>
        </member>
        <member name="M:ValidaHora.VerificaHoraIniDisp(System.String,System.String,System.Collections.Generic.List{Agendamentos})">
            <summary>
            Verifica se a hora inicial está disponível para agendamento.
            </summary>
            <param name="data"></param>
            <param name="hora"></param>
            <param name="agds"></param>
            <returns>True se estiver.Fala se não.</returns>
        </member>
        <member name="M:ValidaHora.VerificaHoraFimDisp(System.String,System.String,System.Collections.Generic.List{Agendamentos})">
            <summary>
            Verifica se a hora final está disponível para agendamento.
            </summary>
            <param name="data"></param>
            <param name="horaFinal"></param>
            <param name="agds"></param>
            <returns>True se estiver.Fala se não.</returns>
        </member>
        <member name="T:ValidaNome">
            <summary>
            Classe responsável pelos métodos de validação de um nome.
            </summary>
        </member>
        <member name="M:ValidaNome.VerificaNome(System.String)">
            <summary>
            Verfica se o nome possui pelo menos 5 caracteres.
            </summary>
            <param name="nome"></param>
            <returns>True se sim.False se não.</returns>
        </member>
        <member name="T:AgendamentoCadView">
            <summary>
            Classe responsável em obter os dados do usuário e utilizar as classes validadoras para validar os mesmos.Realiza o cadastramento de um novo paciente.
            </summary>
        </member>
        <member name="T:AgendamentoExcView">
            <summary>
            Classe responsável em obter os dados do usuário e utilizar as classes validadoras para validar os mesmos.Realiza a exclusão de um paciente.
            </summary>
        </member>
        <member name="T:ListagemAgendaView">
            <summary>
            Classe que irá mostrar para o usuário todos os agendamentos realizados/a fazer ou em um período específico.
            </summary>
        </member>
        <member name="T:ListagemPacienteView">
            <summary>
            Classe que irá mostrar para o usuário todos os clientes cadastrados.
            </summary>
        </member>
        <member name="T:PacienteCadView">
            <summary>
            Classe responsável em obter os dados do usuário e utilizar as classes validadoras para validar os mesmos.Realiza o cadastramento de um novo agendamento.
            </summary>
        </member>
        <member name="T:PacienteExcView">
            <summary>
            Classe responsável em obter os dados do usuário e utilizar as classes validadoras para validar os mesmos.Realiza a exclusão de um paciente.
            </summary>
        </member>
        <member name="T:View">
            <summary>
            Classe responsável pela interação com usuário.Irá receber os input e interagir com a classe controler.
            </summary>
        </member>
    </members>
</doc>
